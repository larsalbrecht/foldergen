#summary Alles über die foldergenconf
#labels Featured,Phase-Deploy
<wiki:toc max_depth="3" />

<g:plusone size="standard"></g:plusone>
= foldergenconf =
Die foldergenconf ist eine Konfigurationsdatei für FolderGen. Man kann seine eigene foldergenconf mit einem einfachen Texteditor wie (G)Vim, notepad, notepad++, scite oder ähnlichen Programmen erstellen. Die Datei darf nicht im UTF8-Format mit Byte Order Mark (kurz: BOM) gespeicher sein. Wenn es so eine Datei ist, dann wird die oberste Ebene nicht erstellt. Dies wird irgendwann in der Zukunft repariert. Wenn UTF8 gebraucht wird, dann kann man auch eine UTF8-Datei ohne BOM erstellen.

== foldergenconf content ==

Beispiel 01:
{{{
+ Mein Haupt Ordner
	- eine Beispiel Datei
	- eine andere Datei
	+ ein Unterorder in Mein Haupt Ordner
		+ ein Unterordner im Unterordner
		- eine Datei in einem Unterordner
	- eine andere Datei 2
	~ eine datei kopie -> /home/meinedatei
	~ eine ordner kopie -> /home/meinordner/
		- eine datei in einem kopierten ordner
	~ eine datei aus dem weg -> http://www.example.com/beispieldatei
	> /home/meinezipdatei.zip
}}}

Jede Zeile hat eine bestimmte Syntax. Jedes Leerzeichen (z.B. \t oder \n) wird benutzt um die Struktur zu erzeigen. Vorsicht: nutze nur eine Art von Leerzeichen um die Struktur zu erzeugen (z.B. nur Tabs (\t)).
Dann folgt der Start einer Datei (-), einer Kopie^1^ (~), einer Zip-Datei^2^ (>) oder eines Ordners (+). Eine Zip-Datei muss mit .jar oder .zip enden. Wenn man eine neue Zip-Datei erstellt, können keine neuen Ordner oder Dateien hinterlegt werden:
*Dies ist nicht erlaubt:*
{{{
> /home/meinezipdatei.zip
	- neue Datei
}}}

Wenn eine Datei existiert, wird diese *NICHT* überschrieben.

Man kann neue Dateien / Ordner in einem kopierten Ordner auf dem gleichen Weg erzeugen, wie bei normalen Ordnern. 

Wenn man Inhalt für eine Datei anlegen möchte, kann man dies mit "(((" und ")))" machen, um den Bereich zu markieren der in der Datei erscheinen soll.

Wenn man eine Datei in einer Datei erstellen möchte, wird dies nicht geschrieben.

{{{
+ Mein Haupt Ordner
	+ ein Unterorder in Mein Haupt Ordner
		- eine Datei
		(((
		/*************************
		 * Dies ist ein Template
		 ************************/
		 Man kann den Text für die Datei in der foldergenconf festlegen.
		 Dieser Inhalten wird geparst und in die Datei "eine Datei" geschrieben.
		)))
		- eine zweite Datei
+ Ein anderer Haupt Ordner
	+ ein Unterorder in Ein anderer Haupt Ordner
		- eine dritte Datei
		(((
		Anderer Inhalt für eine andere Datei
		)))
}}}

=== Marker (ab Version 1.2) ===
Man kann Marker in templates benutzen.
	 * ${user.name} - Gibt den Benutzernamen zurück
	 * ${user.homedir} - Gibt das Benutzer Home Verzeichnis zurück
	 * ${system.os} - Gibt das Betriebssystem zurück
	 * ${file.currentdir} - Gibt das aktuelle Verzeichnis zurück
	 * ${file.name} - Gibt den aktuellen Dateinamen zurück
	 * ${date.year} - Gibt das aktuelle Jahr zurück
	 * ${date.month} - Gibt den aktuellen Monat zurück
	 * ${date.day} - Gibt den aktuellen Tag zurück
	 * ${date.hour} - Gibt die aktuelle Stunde zurück
	 * ${date.minute} - Gibt die aktuelle Minute zurück
	 * ${date.second} - Gibt die aktuellen Sekunden zurück
	 * ${date.isleap(YEAR)} - Ist das Jahr ein Schaltjahr?
	 * ${date.formatcurrent([Format FORMAT])} - Gibt das aktuelle Datum als formatierten Text zurück
	 * ${func.counter(VAR)} - Zähler für eine VAR(iable)
	 * ${func.counter(VAR|STARTNUMBER)} - Zähler für eine VAR(iable) mit einer STARTNUMBER
	 * ${func.getfilecontent(filepath)} - Gibt den Inhalt der angegebenen Datei zurück
	 * ... mehr kommt bald ...

Beispiel 01:
{{{
+ Mein Haupt Ordner
	- Dateizusatz
		(((
		Zusätzlicher Text
		)))
	- Datei
		(((
		/*************************
		 * Dies ist ein Template ${file.name}
		 * Autor: ${user.name} @ 
		 * ${date.day}.${date.month}.${date.year}
		 * ${date.hour}:${date.minute}:${date.second}
		 * Schaltjahr: ${date.isleapyear(${date.year})}
		 * ${date.formatcurrent(d.M.yy)}
		 ************************/
		 Man kann den Text für die Datei in der foldergenconf festlegen.
		 Dieser Inhalten wird geparst und in die Datei "eine Datei" geschrieben.
		 ${func.counter(a)} : 0
			${func.counter(b)} : Null Null
			${func.counter(b)} : Null Eins
			${func.counter(b)} : Null Zwei
		 ${func.counter(a)} : Eins
		 ${func.counter(a)} : Zwei

		 ${func.counter(c|10)} : Zehn
			${func.counter(d|1)} : Zehn Eins
			${func.counter(d)} : Zehn Zwei
			${func.counter(d)} : Zehn Drei
		 ${func.counter(c|20)} : Zwanzig
		 ${func.counter(c)} : Elf (Der erste Zähler zählt)
		 ${func.getfilecontent(C:\Mein Haupt Ordner\Dateizusatz)}


}}}

----
^1^ : Version 1.4.8.0 und höher. Ab Version 1.5.0.0 können URLs angegeben werden aus denen der Inhalt für die neue Datei kommt (URL muss mit http:// oder https:// anfangen).

^2^ : Version 1.5.1.0 und höher.