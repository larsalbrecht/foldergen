#summary Allgemeine Informationen über FolderGen
#labels Featured,Phase-Deploy
<wiki:toc max_depth="3" />

<g:plusone size="standard"></g:plusone>
= folderGen =
FolderGen wird verwendet um automatisch Ordner und Dateien über eine Konfigurationsdatei (foldergenconf genannt) zu erstellen. Man kann auch Inhalte für Dateien festlegen, die automatisch in die Dateien geschrieben werden.

== Was ist folderGen? ==
FolderGen ist eine Java Anwendung (Kommandozeile und GUI) mit der man automatisch Ordner und Dateien (mit Inhalt) erstellen kann.

== Versionierung ==
{{{1.2.3.4}}}
 * 1
  * Wird erhöht wenn viel Code neugeschrieben (refactored) wurde, größere neue Funktionen (Features) hinzugefügt wurden oder wenn ich das _gefühl_ habe, sie müsste steigen.
 * 2
  * Wird erhöht wenn neue (kleine bis mittlere) Funktionen (Features) hinzugefügt wurden oder eine Funktion verbessert wurde.
 * 3
  * Wird erhöht wenn es kleine (aber wichtigen) Fehlerkorrekturen gab. 
 * 4
  * Wird erhöht wenn kleine Fehler korrigiert wurden, oder wenn kleine Funktionen (Features) verändert wurden. Auch wenn der Quellcode (teilweise) neu geschrieben (refactored) wurde.

== Allgemeine Informationen zum Start ==
Wenn man die .jar-Datei hat, braucht man noch eine .[foldergenconf]-Datei. Diese Datei kann mit einem einfachen Editor erstellt werden. Hierfür eignen sich z.B.: (g)VIM, notepad oder etwas in der Art. Für mehr Informationen über die foldergenconf, lohnt sich ein Blick in die Wiki-Seite.

=== Installation ===
 # Lade die Jar-Datei im Downloadbereich herunter
 # Unter Debian / Ubuntu (und weiteren Debiandistributionen) kann man auch das .deb-Paket herunterladen und installieren _(... coming soon...)_

=== Starte folderGen (Version 1.2.0.0 und niedriger) ===
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf
}}}
oder 
{{{
java -jar foldergen.jar /home/testuser/<dateiname>.foldergenconf
}}}

=== Starte folderGen (Version 1.2.0.0 bis Version 1.3.0.0) ===
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf
}}}
oder 
{{{
java -jar foldergen.jar /home/testuser/<dateiname>.foldergenconf
}}}


==== Mehr Beispiele ====
Starte mit GUI und Konfigurationsdatei (ohne debug-modus):
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf true
}}}

Starte mit GUI und Konfigurationsdatei (mit debug-modus):
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf true true
}}}

Starte ohne GUI und mit Konfigurationsdatei (ohne debug-modus):
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf
}}}

Starte ohne GUI und mit Konfigurationsdatei (mit debug-modus):
{{{
java -jar foldergen.jar C:\<dateiname>.foldergenconf false true
}}}

Starte mit GUI und ohne Konfigurationsdatei (ohne debug-modus):
{{{
java -jar foldergen.jar true false
}}}

Starte mit GUI und ohne Konfigurationsdatei (mit debug-modus):
{{{
java -jar foldergen.jar true true
}}}

FolderGen ohne Konfigurationsdatei und ohne GUI zu starten, ist nicht erlaubt bzw. nicht möglich.


=== Starte folderGen (Version 1.4.0.0 und höher) ===
Ab der Version 1.4.0.0 werden die Startparameter anders eingelesen als vorher. Ab jetzt gibt es folgende Parameter:

 * -c,-config {{{<arg>}}}  	Konfigurationsdatei (*.foldergenconf)
 * -d,-debug         		Zeigt Debugausgaben
 * -g,-gui           		benutzt die GUI
 * -h,-help          		Zeigt diesen Hilfe-Eintrag (auf englisch)
 * -co,-confirmation 		Zeigt ein Abfragefenster bevor Dateien und Ordner geschrieben werden (hinzugefügt in 1.4.6.0)
 * -l,-locale {{{<arg>}}} 	Setzt die Sprache um das Programm zu übersetzten (hinzugefügt in 1.4.6.0)
 * -r,-root {{{<arg>}}} 	Setzt den Startordner um die Ordner und Dateien hier zu erstellen (hinzugefügt in 1.4.6.0)
 * -p,-plugins       		Wenn dies gesetzt ist, werden vorhandene Plugins geladen (hinzugefügt in 1.4.9.0)
 * -px,-proxy        		Wenn dies gesetzt ist, versucht FolderGen den Standardproxy zu benutzen, falls einer gesetzt ist (hinzugefügt in 1.5.0.0)
<wiki:comment> * -o,--overwrite <arg>  	Überschreibe Dateien und Ordner (hinzugefügt in 1.6.0.0)</wiki:comment>


{{{
java -jar foldergen.jar -c C:\<dateiname>.foldergenconf
}}}
oder
{{{
java -jar foldergen.jar -c /home/testuser/<dateiname>.foldergenconf
}}}

==== More Examples ====
Starte mit GUI und Konfigurationsdatei (ohne debug):
{{{
java -jar foldergen.jar -c C:\<dateiname>.foldergenconf -g
}}}

Starte mit GUI und Konfigurationsdatei (mit debug):
{{{
java -jar foldergen.jar -c C:\<dateiname>.foldergenconf -g -d
}}}

Starte ohne GUI und mit Konfigurationsdatei (ohne debug):
{{{
java -jar foldergen.jar -config C:\<dateiname>.foldergenconf
}}}

Starte ohne GUI und mit Konfigurationsdatei (mit debug):
{{{
java -jar foldergen.jar -c C:\<dateiname>.foldergenconf -debug
}}}

Starte ohne GUI und ohne Konfigurationsdatei (ohne debug):
{{{
java -jar foldergen.jar -gui
}}}

Starte mit GUI und ohne Konfigurationsdatei (mit debug):
{{{
java -jar foldergen.jar -g -debug
}}}

Starte mit Plugins (verfügbar ab version 1.4.9.0) und mit GUI (mit debug):
{{{
java -jar foldergen.jar -g -p
}}}

FolderGen ohne Konfigurationsdatei und ohne GUI zu starten, ist nicht erlaubt bzw. nicht möglich.

=== In Eclipse als "external tools" ===
In Eclipse kann man "External Tools" erstellen. Dies ist einfach einzurichten:

 # Öffne das Menü "External Tools Configurations"
 # Location: ${env_var:JAVA_HOME}/bin/java.exe
 # Working Directory: {{{<beliebig>}}}
 # Arguments: -jar <pfad/zur/>foldergenjar.jar

Man kann auch weitere Parameter hinter "{{{-jar <path/to/>foldergenjar.jar}}}" einstellen.